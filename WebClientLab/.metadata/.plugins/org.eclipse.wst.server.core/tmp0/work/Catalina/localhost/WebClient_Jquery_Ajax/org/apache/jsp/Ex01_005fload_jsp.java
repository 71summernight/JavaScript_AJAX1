/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.43
 * Generated at: 2021-04-06 02:17:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Ex01_005fload_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<script\n");
      out.write("\tsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("/*Jquery 제공하는 비동기함수(Ajax) 학습\n");
      out.write(" *https://api.jquery.com/category/ajax/\n");
      out.write(" *Jquery비동기 함수는 내부적으로:XmlHttpRequest 객체를 사용\n");
      out.write(" \n");
      out.write(" Ajax \n");
      out.write(" Global Ajax Event Handlers(10%)\n");
      out.write(" Helper Functions(10%)\n");
      out.write(" Low-Level Interface: 30%(모든 옵션을 개발자 제어)>>$.ajax()\n");
      out.write(" Shorthand Metghods:50%(기본 옵션을 가지고 있는 함수)>>load(),get()\n");
      out.write(" \t\n");
      out.write(" .load( url [, data ] [, complete ] )\n");
      out.write(" \n");
      out.write(" [url]\n");
      out.write(" Type:String \n");
      out.write(" A string containing the URL to which the request is sent.\n");
      out.write(" \n");
      out.write(" [data] \n");
      out.write(" Type: PlainObject or String\n");
      out.write(" A plain object or string that is sent to the server with the request.\n");
      out.write("\n");
      out.write(" [complete]\n");
      out.write(" Type: Function( String responseText, String textStatus, jqXHR jqXHR )\n");
      out.write(" A callback function that is executed when the request completes.\n");
      out.write(" \n");
      out.write(" load 함수\n");
      out.write(" 1. 서버에서 받은 데이터가 (html,text) 형식\n");
      out.write(" 2. Client 정한 특정요소에 자동으로 매핑할 목적( 자동 innerHTML)\n");
      out.write(" \n");
      out.write(" [data]두번째 parameter 설정\n");
      out.write(" jsp?msg=hello\n");
      out.write("\t\t \n");
      out.write(" [data]두번째 parameter 객체설정(json)\n");
      out.write(" {name:\"kglim\", age:100}\n");
      out.write(" ?name=kglim&age=100\n");
      out.write(" \n");
      out.write(" */\n");
      out.write("$(function(){\n");
      out.write("\t$('#btn').click(function(){\n");
      out.write("\t\t//$('#display').load(\"Ex01_Server_Date.jsp\"); simple 비동기\n");
      out.write("\t\t$('#display').load(\"Ex01_Server_Date.jsp\", {\"msg\":$('#msg2').val()},\n");
      out.write("\t\t\t\tfunction(responseText,textStatus,xhr){ //xhr: xmlhttprequest의 줄임말\n");
      out.write("\t\t\t//함수는 응답이 오면 readyState>>4 라면,, 호출\n");
      out.write("\t\t\t//responseText: 서버가 응답한 결과물 (html,text)\n");
      out.write("\t\t\t//textStatus(success,fail)\n");
      out.write("\t\t\t//Status>>200,204,404,500\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tif(textStatus==\"success\"){\n");
      out.write("\t\t\t\t//응답4,status code:200\n");
      out.write("\t\t\t\tconsole.log(\"responseText:\" +responseText);\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t}else{\n");
      out.write("\t\t\t\t//응답4, status code: 500, 404\n");
      out.write("\t\t\t\tconsole.log(\"response fail: \"+xhr.status+\", \"+xhr.statusText);\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t});\n");
      out.write("})\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<h3>동기처리</h3>\n");
      out.write("<div>\n");
      out.write("<form action=\"Ex01_Server_Date.jsp\" method=\"get\">\n");
      out.write("<input type=\"text\" name=\"msg\" id=\"msg\">\n");
      out.write("<input type=\"submit\" value=\"동기전송\">\n");
      out.write("\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("<h3>비동기 처리</h3>\n");
      out.write("<input type=\"text\" name=\"msg2\" id=\"msg2\">\n");
      out.write("<input type=\"button\" id=\"btn\" value=\"비동기전송\">\n");
      out.write("\n");
      out.write("<div id=\"display\"></div>\n");
      out.write("\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
